"""
parse.py is a component of Screlp that parses retrieved results.

scrape_yelp is a function which takes a list of generated coordinates and makes
Yelp API calls, and parses the result from those calls, for every single
coordinate generated by geog.py.

parse_results is a function that takes a JSON result returned from an API call
and creates a single object result from it. Originally, this was an object I
had created called "Business", but it was decided that since that object had
no real methods, it was better to use a namedtuple, which is what it uses now.
It assigns each returned variable to a named attribute in the namedtuple, and
appends that completed namedtuple to a list of similar namedtuples. This list
of namedtuples is then returned for later manipulation by the functions in
files.py, for instance.
"""

import sys
import screlp.backend.connect as connect
from collections import namedtuple


def scrape_yelp(args, coords, creds):
    """
    Uses list of generated coordinates to:

        1) Generate an API query URL
        2) Visit that URL and retrieve results
        3) Parse the JSON received

    Then returns the parsed results as a list.
    """
    items = []
    for coord in coords:
        url = connect.make_url(args, coord)
        try:
            result = connect.make_api_call(url, creds)
            items = parse_results(result, items, url)
        except RuntimeError:
            return None
    return items


def parse_results(api_result, items, url):
    """
    Takes JSON result from Yelp query and uses each individual result to
    create a namedtuple of select attributes. This namedtuple is then added
    to a list of similar namedtuples. That list is checked for duplicate
    entries and then returned.
    """
    for position in range(0, api_result["total"]):
        Business = namedtuple("business", ["result_position", "id", "name", 
                                           "phone", "address", "city", "state",
                                           "zip", "rating", "review_count",
                                           "category", "query_performed"])
        item = []
        try:
            source = api_result["businesses"][position]
            item.append(position + 1)
            item.append(source["id"])
            item.append(source["name"])
            item.append("({0}) {1}-{2}".format(source["phone"][:3], \
                                               source["phone"][3:6], \
                                               source["phone"][6:]))
            if len(source["location"]["address"]) > 1:
                """ 
                Handles case where there is a secondary aspect to the
                address, such as a unit or suite number.
                """
                item.append(source["location"]["address"][0] + ", " +
                            source["location"]["address"][1])
            else:
                item.append(source["location"]["display_address"][0])
            item.append(source["location"]["city"])
            item.append(source["location"]["state_code"])
            item.append(source["location"]["postal_code"])
            item.append(str(source["rating"]))
            item.append(str(source["review_count"]))
            item.append(source["categories"][0][0])
            url = url.replace("http://api.yelp.com/v2/search?", "")
            item.append(url)
            biz = Business._make(item)
            items.append(biz)
        except IndexError:
            break
        except KeyError:
            try:
                if api_result["error"]:
                    print("Error(s) encountered, please see raw_output.txt!")
                    # files.write_raw_result(api_result)
                    sys.exit(1)
            except:
                pass
                # files.write_raw_result(api_result)
    items = list(set(items))
    return items
